type token =
  | DEQ
  | COLON
  | SEMICOLON
  | COMMA
  | DARR
  | LPAREN
  | RPAREN
  | EQ
  | NEQ
  | PROP
  | OPENCOM
  | CLOSECOM
  | REQUIRE
  | EXPORT
  | SECTION
  | END
  | ALL
  | EX
  | EXU
  | IMP
  | LAM
  | CONJ
  | DISJ
  | IFF
  | NEG
  | FALSE
  | TRUE
  | BLANK
  | LLET
  | IN
  | SAR
  | INDTYPE
  | PROPTYPE
  | MEM
  | NMEM
  | SUBQ
  | NSUBQ
  | VAR
  | HYP
  | BLET
  | PARAM
  | AXIOM
  | DEF
  | THEOREM
  | EXACT
  | QED
  | CONJECTURE of (int)
  | DOT of (int)
  | POLY1 of (string)
  | POLY2 of (string)
  | NARY1 of (string)
  | NARY2 of (string)
  | INT of (int)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* DEQ *);
  258 (* COLON *);
  259 (* SEMICOLON *);
  260 (* COMMA *);
  261 (* DARR *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* EQ *);
  265 (* NEQ *);
  266 (* PROP *);
  267 (* OPENCOM *);
  268 (* CLOSECOM *);
  269 (* REQUIRE *);
  270 (* EXPORT *);
  271 (* SECTION *);
  272 (* END *);
  273 (* ALL *);
  274 (* EX *);
  275 (* EXU *);
  276 (* IMP *);
  277 (* LAM *);
  278 (* CONJ *);
  279 (* DISJ *);
  280 (* IFF *);
  281 (* NEG *);
  282 (* FALSE *);
  283 (* TRUE *);
  284 (* BLANK *);
  285 (* LLET *);
  286 (* IN *);
  287 (* SAR *);
  288 (* INDTYPE *);
  289 (* PROPTYPE *);
  290 (* MEM *);
  291 (* NMEM *);
  292 (* SUBQ *);
  293 (* NSUBQ *);
  294 (* VAR *);
  295 (* HYP *);
  296 (* BLET *);
  297 (* PARAM *);
  298 (* AXIOM *);
  299 (* DEF *);
  300 (* THEOREM *);
  301 (* EXACT *);
  302 (* QED *);
    0|]

let yytransl_block = [|
  303 (* CONJECTURE *);
  304 (* DOT *);
  305 (* POLY1 *);
  306 (* POLY2 *);
  307 (* NARY1 *);
  308 (* NARY2 *);
  309 (* INT *);
  310 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\004\000\006\000\006\000\006\000\007\000\
\007\000\008\000\008\000\005\000\005\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\000\000"

let yylen = "\002\000\
\003\000\004\000\003\000\003\000\005\000\005\000\010\000\005\000\
\005\000\005\000\007\000\005\000\008\000\006\000\007\000\005\000\
\008\000\006\000\001\000\003\000\001\000\001\000\003\000\001\000\
\001\000\001\000\002\000\005\000\006\000\001\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\004\000\006\000\004\000\004\000\006\000\006\000\
\004\000\006\000\004\000\006\000\008\000\003\000\005\000\001\000\
\001\000\001\000\002\000\003\000\002\000\003\000\001\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\006\000\004\000\006\000\006\000\004\000\
\006\000\004\000\006\000\008\000\003\000\005\000\001\000\001\000\
\002\000\003\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\003\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\021\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\058\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
\030\000\000\000\000\000\025\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\031\000\016\000\000\000\027\000\
\000\000\000\000\000\000\010\000\006\000\012\000\000\000\000\000\
\000\000\000\000\008\000\023\000\020\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\087\000\000\000\063\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\017\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\089\000\000\000\091\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\090\000\092\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\014\000\064\000\189\000\048\000\036\000\049\000\070\000\071\000\
\065\000\190\000"

let yysindex = "\007\000\
\196\005\000\000\249\254\033\255\042\255\044\255\046\255\052\255\
\066\255\068\255\084\255\085\255\086\255\000\000\094\255\083\255\
\102\255\104\255\131\255\151\255\019\255\156\255\163\255\088\255\
\164\255\165\255\120\255\000\000\000\000\000\000\253\254\229\255\
\229\255\253\254\239\254\025\255\253\254\229\255\229\255\253\254\
\061\255\229\255\229\255\000\000\253\254\000\000\000\000\121\255\
\139\255\229\255\252\254\119\255\122\255\252\254\229\255\000\000\
\000\000\239\254\253\254\253\254\148\255\150\255\000\000\033\001\
\000\000\066\001\181\255\000\000\000\000\239\254\211\255\229\255\
\253\254\167\255\099\001\132\001\215\255\229\255\253\254\165\001\
\198\001\212\255\000\000\253\254\122\000\217\255\034\255\079\255\
\220\255\219\255\100\255\007\004\074\255\000\000\253\254\000\000\
\173\255\229\255\229\255\229\255\229\255\229\255\229\255\229\255\
\229\255\229\255\229\255\000\000\000\000\000\000\229\255\000\000\
\253\254\231\001\232\255\000\000\000\000\000\000\229\255\008\002\
\236\255\182\255\000\000\000\000\000\000\229\255\000\000\229\255\
\253\254\229\255\253\254\229\255\253\254\229\255\253\254\229\255\
\229\255\253\254\000\000\000\000\129\255\129\255\170\003\007\004\
\231\003\170\003\129\255\129\255\129\255\129\255\041\002\231\255\
\000\000\229\255\074\002\000\000\229\255\067\004\107\002\016\003\
\235\255\016\003\245\255\016\003\002\000\016\003\225\255\016\003\
\140\002\006\000\000\000\004\000\173\002\000\000\206\002\067\004\
\252\254\218\255\222\255\252\254\067\004\000\000\239\254\007\255\
\007\255\216\255\239\255\000\000\038\003\000\000\000\000\229\255\
\229\255\229\255\229\255\229\255\229\255\000\000\000\000\000\000\
\158\000\014\000\024\000\027\000\033\000\034\000\142\255\089\004\
\090\255\000\000\007\255\000\000\241\255\067\004\067\004\067\004\
\067\004\067\004\067\004\067\004\067\004\067\004\067\004\251\255\
\000\000\016\003\016\003\016\003\016\003\016\003\239\002\067\004\
\000\000\067\004\067\004\067\004\067\004\067\004\067\004\067\004\
\067\004\067\004\000\000\000\000\007\255\007\255\225\003\089\004\
\029\004\225\003\007\255\007\255\007\255\007\255\250\255\229\255\
\071\003\192\003\179\000\214\000\235\000\192\003\012\001\192\003\
\104\003\086\000\000\000\016\003\000\000\067\004\067\004\067\004\
\067\004\067\004\067\004\192\003\192\003\192\003\192\003\192\003\
\137\003\067\004\192\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\073\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\085\005\104\005\016\255\115\005\
\184\005\077\255\134\005\146\005\165\005\176\005\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\255\
\000\000\245\000\000\000\043\001\000\000\097\001\000\000\130\001\
\000\000\000\000\000\000\050\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\163\001\196\001\229\001\006\002\039\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\107\004\143\004\227\255\152\004\
\251\004\170\255\179\004\188\004\215\004\224\004\000\000\000\000\
\000\000\045\000\000\000\000\000\000\000\098\004\000\000\004\005\
\000\000\000\000\000\000\072\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\005\026\005\034\005\043\005\053\005\
\000\000\000\000\064\005"

let yygindex = "\000\000\
\000\000\223\255\226\255\180\000\233\255\238\255\202\255\221\255\
\224\255\076\000"

let yytablesize = 1779
let yytable = "\066\000\
\041\000\035\000\045\000\093\000\075\000\076\000\015\000\001\000\
\080\000\081\000\068\000\026\000\176\000\026\000\026\000\087\000\
\085\000\038\000\091\000\033\000\034\000\092\000\038\000\068\000\
\035\000\072\000\073\000\086\000\046\000\047\000\090\000\109\000\
\182\000\109\000\112\000\129\000\069\000\130\000\114\000\038\000\
\094\000\095\000\109\000\109\000\120\000\038\000\016\000\109\000\
\109\000\069\000\028\000\028\000\109\000\028\000\028\000\184\000\
\185\000\186\000\187\000\109\000\188\000\078\000\079\000\038\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\150\000\137\000\138\000\139\000\151\000\041\000\045\000\
\131\000\109\000\132\000\041\000\045\000\155\000\017\000\109\000\
\039\000\040\000\241\000\242\000\159\000\035\000\160\000\018\000\
\162\000\019\000\164\000\020\000\166\000\135\000\168\000\169\000\
\136\000\021\000\041\000\045\000\109\000\109\000\109\000\109\000\
\109\000\109\000\109\000\109\000\109\000\109\000\109\000\022\000\
\173\000\023\000\109\000\175\000\041\000\045\000\109\000\109\000\
\209\000\109\000\028\000\109\000\031\000\109\000\050\000\109\000\
\109\000\024\000\025\000\026\000\109\000\203\000\109\000\239\000\
\207\000\201\000\240\000\027\000\198\000\029\000\208\000\030\000\
\032\000\202\000\056\000\057\000\206\000\037\000\226\000\227\000\
\228\000\229\000\230\000\231\000\038\000\042\000\043\000\044\000\
\083\000\084\000\074\000\074\000\088\000\074\000\074\000\089\000\
\074\000\059\000\060\000\061\000\062\000\111\000\063\000\245\000\
\246\000\247\000\248\000\249\000\250\000\251\000\252\000\253\000\
\254\000\109\000\109\000\109\000\109\000\109\000\109\000\074\000\
\096\000\001\001\097\000\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\113\000\067\000\116\000\119\000\
\074\000\074\000\124\000\077\000\128\000\133\000\012\001\134\000\
\082\000\140\000\158\000\071\000\071\000\195\000\071\000\071\000\
\154\000\071\000\050\000\109\000\157\000\172\000\192\000\020\001\
\021\001\022\001\023\001\024\001\025\001\051\000\052\000\053\000\
\193\000\054\000\071\000\027\001\115\000\055\000\056\000\057\000\
\071\000\058\000\121\000\210\000\211\000\194\000\197\000\125\000\
\225\000\035\000\075\000\075\000\212\000\075\000\075\000\204\000\
\075\000\234\000\071\000\205\000\225\000\059\000\060\000\061\000\
\062\000\235\000\063\000\225\000\236\000\075\000\243\000\075\000\
\075\000\075\000\237\000\213\000\152\000\244\000\238\000\075\000\
\255\000\011\001\000\000\000\000\000\000\077\000\077\000\000\000\
\077\000\077\000\000\000\077\000\161\000\000\000\163\000\000\000\
\165\000\075\000\167\000\000\000\000\000\170\000\000\000\000\000\
\225\000\225\000\225\000\225\000\225\000\225\000\225\000\225\000\
\225\000\225\000\077\000\000\000\225\000\225\000\225\000\225\000\
\225\000\225\000\225\000\225\000\225\000\225\000\019\001\000\000\
\000\000\000\000\000\000\176\000\077\000\214\000\215\000\225\000\
\225\000\225\000\225\000\225\000\225\000\000\000\225\000\000\000\
\000\000\216\000\000\000\217\000\218\000\219\000\000\000\182\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\220\000\
\221\000\222\000\223\000\126\000\000\000\000\000\000\000\050\000\
\127\000\098\000\099\000\000\000\000\000\000\000\184\000\185\000\
\186\000\187\000\000\000\188\000\000\000\100\000\000\000\101\000\
\102\000\103\000\000\000\056\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\000\105\000\106\000\107\000\232\000\
\000\000\000\000\000\000\176\000\233\000\214\000\215\000\000\000\
\000\000\000\000\059\000\060\000\061\000\062\000\000\000\063\000\
\000\000\216\000\000\000\217\000\218\000\219\000\014\001\182\000\
\176\000\000\000\214\000\215\000\000\000\000\000\000\000\220\000\
\221\000\222\000\223\000\000\000\000\000\000\000\216\000\000\000\
\217\000\218\000\219\000\000\000\182\000\000\000\184\000\185\000\
\186\000\187\000\000\000\188\000\220\000\221\000\222\000\223\000\
\000\000\015\001\000\000\176\000\000\000\214\000\215\000\000\000\
\000\000\000\000\000\000\184\000\185\000\186\000\187\000\000\000\
\188\000\216\000\000\000\217\000\218\000\219\000\016\001\182\000\
\176\000\000\000\214\000\215\000\000\000\000\000\043\000\220\000\
\221\000\222\000\223\000\043\000\000\000\000\000\216\000\000\000\
\217\000\218\000\219\000\000\000\182\000\000\000\184\000\185\000\
\186\000\187\000\000\000\188\000\220\000\221\000\222\000\223\000\
\017\001\176\000\043\000\214\000\215\000\000\000\000\000\000\000\
\000\000\000\000\000\000\184\000\185\000\186\000\187\000\216\000\
\188\000\217\000\218\000\219\000\043\000\182\000\050\000\000\000\
\098\000\099\000\000\000\000\000\046\000\220\000\221\000\222\000\
\223\000\046\000\000\000\000\000\100\000\000\000\101\000\102\000\
\103\000\000\000\056\000\057\000\184\000\185\000\186\000\187\000\
\000\000\188\000\104\000\105\000\106\000\107\000\000\000\050\000\
\046\000\098\000\099\000\000\000\000\000\000\000\000\000\000\000\
\108\000\059\000\060\000\061\000\062\000\100\000\063\000\101\000\
\102\000\103\000\046\000\056\000\057\000\000\000\000\000\000\000\
\000\000\000\000\051\000\104\000\105\000\106\000\107\000\051\000\
\050\000\000\000\098\000\099\000\000\000\000\000\000\000\000\000\
\000\000\110\000\059\000\060\000\061\000\062\000\100\000\063\000\
\101\000\102\000\103\000\000\000\056\000\057\000\051\000\000\000\
\000\000\000\000\000\000\049\000\104\000\105\000\106\000\107\000\
\049\000\050\000\000\000\098\000\099\000\000\000\000\000\000\000\
\051\000\000\000\117\000\059\000\060\000\061\000\062\000\100\000\
\063\000\101\000\102\000\103\000\000\000\056\000\057\000\049\000\
\000\000\000\000\000\000\000\000\044\000\104\000\105\000\106\000\
\107\000\044\000\050\000\000\000\098\000\099\000\000\000\000\000\
\000\000\049\000\000\000\118\000\059\000\060\000\061\000\062\000\
\100\000\063\000\101\000\102\000\103\000\000\000\056\000\057\000\
\044\000\000\000\000\000\000\000\000\000\047\000\104\000\105\000\
\106\000\107\000\047\000\050\000\000\000\098\000\099\000\000\000\
\000\000\000\000\044\000\000\000\122\000\059\000\060\000\061\000\
\062\000\100\000\063\000\101\000\102\000\103\000\000\000\056\000\
\057\000\047\000\000\000\000\000\000\000\000\000\048\000\104\000\
\105\000\106\000\107\000\048\000\050\000\000\000\098\000\099\000\
\000\000\000\000\000\000\047\000\000\000\123\000\059\000\060\000\
\061\000\062\000\100\000\063\000\101\000\102\000\103\000\000\000\
\056\000\057\000\048\000\000\000\000\000\000\000\000\000\050\000\
\104\000\105\000\106\000\107\000\050\000\050\000\000\000\098\000\
\099\000\000\000\000\000\000\000\048\000\000\000\153\000\059\000\
\060\000\061\000\062\000\100\000\063\000\101\000\102\000\103\000\
\000\000\056\000\057\000\050\000\000\000\000\000\000\000\000\000\
\052\000\104\000\105\000\106\000\107\000\052\000\050\000\000\000\
\098\000\099\000\000\000\000\000\000\000\050\000\000\000\156\000\
\059\000\060\000\061\000\062\000\100\000\063\000\101\000\102\000\
\103\000\000\000\056\000\057\000\052\000\000\000\000\000\000\000\
\000\000\053\000\104\000\105\000\106\000\107\000\053\000\050\000\
\000\000\098\000\099\000\000\000\000\000\000\000\052\000\000\000\
\171\000\059\000\060\000\061\000\062\000\100\000\063\000\101\000\
\102\000\103\000\000\000\056\000\057\000\053\000\000\000\000\000\
\000\000\000\000\000\000\104\000\105\000\106\000\107\000\000\000\
\050\000\191\000\098\000\099\000\000\000\000\000\000\000\053\000\
\000\000\174\000\059\000\060\000\061\000\062\000\100\000\063\000\
\101\000\102\000\103\000\000\000\056\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\104\000\105\000\106\000\107\000\
\000\000\050\000\000\000\098\000\099\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\060\000\061\000\062\000\100\000\
\063\000\101\000\102\000\103\000\000\000\056\000\057\000\000\000\
\000\000\196\000\000\000\000\000\000\000\104\000\105\000\106\000\
\107\000\000\000\050\000\000\000\098\000\099\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\060\000\061\000\062\000\
\100\000\063\000\101\000\102\000\103\000\000\000\056\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\105\000\
\106\000\107\000\000\000\050\000\000\000\098\000\099\000\000\000\
\000\000\000\000\000\000\000\000\199\000\059\000\060\000\061\000\
\062\000\100\000\063\000\101\000\102\000\103\000\000\000\056\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\104\000\
\105\000\106\000\107\000\000\000\050\000\000\000\098\000\099\000\
\000\000\000\000\000\000\000\000\000\000\200\000\059\000\060\000\
\061\000\062\000\100\000\063\000\101\000\102\000\103\000\019\000\
\056\000\057\000\019\000\019\000\000\001\019\000\000\000\000\000\
\104\000\105\000\106\000\107\000\000\000\050\000\000\000\098\000\
\099\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\060\000\061\000\062\000\100\000\063\000\101\000\102\000\103\000\
\000\000\056\000\057\000\176\000\000\000\214\000\215\000\000\000\
\000\000\104\000\105\000\106\000\107\000\000\000\019\000\000\000\
\000\000\216\000\000\000\217\000\218\000\219\000\000\000\182\000\
\059\000\060\000\061\000\062\000\000\000\063\000\000\000\220\000\
\221\000\222\000\223\000\000\000\176\000\013\001\214\000\215\000\
\000\000\000\000\000\000\000\000\000\000\224\000\184\000\185\000\
\186\000\187\000\216\000\188\000\217\000\218\000\219\000\000\000\
\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\220\000\221\000\222\000\223\000\000\000\176\000\000\000\214\000\
\215\000\000\000\000\000\000\000\000\000\000\000\000\000\184\000\
\185\000\186\000\187\000\216\000\188\000\217\000\218\000\219\000\
\000\000\182\000\000\000\000\000\000\000\018\001\000\000\000\000\
\000\000\220\000\221\000\222\000\223\000\000\000\176\000\000\000\
\214\000\215\000\000\000\000\000\000\000\000\000\000\000\000\000\
\184\000\185\000\186\000\187\000\216\000\188\000\217\000\218\000\
\219\000\000\000\182\000\000\000\000\000\000\000\026\001\000\000\
\000\000\000\000\220\000\221\000\222\000\223\000\000\000\050\000\
\000\000\098\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\184\000\185\000\186\000\187\000\100\000\188\000\101\000\
\102\000\000\000\000\000\056\000\057\000\176\000\000\000\214\000\
\215\000\000\000\000\000\104\000\105\000\106\000\107\000\000\000\
\000\000\000\000\000\000\216\000\000\000\217\000\218\000\219\000\
\000\000\182\000\059\000\060\000\061\000\062\000\000\000\063\000\
\000\000\220\000\221\000\222\000\223\000\000\000\176\000\000\000\
\214\000\215\000\000\000\000\000\050\000\000\000\098\000\099\000\
\184\000\185\000\186\000\187\000\216\000\188\000\217\000\218\000\
\000\000\000\000\182\000\000\000\101\000\000\000\000\000\000\000\
\056\000\057\000\220\000\221\000\222\000\223\000\000\000\000\000\
\104\000\105\000\106\000\107\000\050\000\000\000\098\000\099\000\
\000\000\184\000\185\000\186\000\187\000\000\000\188\000\059\000\
\060\000\061\000\062\000\000\000\063\000\000\000\000\000\000\000\
\056\000\057\000\176\000\000\000\214\000\215\000\000\000\000\000\
\104\000\105\000\106\000\107\000\000\000\000\000\000\000\000\000\
\000\000\000\000\217\000\000\000\000\000\000\000\182\000\059\000\
\060\000\061\000\062\000\000\000\063\000\000\000\220\000\221\000\
\222\000\223\000\000\000\000\000\000\000\000\000\000\000\000\000\
\176\000\000\000\000\000\000\000\000\000\184\000\185\000\186\000\
\187\000\000\000\188\000\177\000\178\000\179\000\000\000\180\000\
\000\000\000\000\000\000\181\000\182\000\000\000\176\000\183\000\
\214\000\215\000\082\000\082\000\000\000\082\000\082\000\000\000\
\082\000\000\000\000\000\065\000\065\000\000\000\065\000\065\000\
\000\000\065\000\182\000\184\000\185\000\186\000\187\000\000\000\
\188\000\000\000\220\000\221\000\222\000\223\000\065\000\082\000\
\065\000\065\000\065\000\000\000\000\000\000\000\000\000\000\000\
\065\000\184\000\185\000\186\000\187\000\000\000\188\000\066\000\
\066\000\082\000\066\000\066\000\000\000\066\000\000\000\000\000\
\072\000\072\000\065\000\072\000\072\000\000\000\072\000\000\000\
\000\000\000\000\066\000\000\000\066\000\066\000\066\000\000\000\
\000\000\000\000\000\000\072\000\066\000\072\000\072\000\072\000\
\000\000\000\000\000\000\067\000\067\000\072\000\067\000\067\000\
\000\000\067\000\000\000\000\000\068\000\068\000\066\000\068\000\
\068\000\000\000\068\000\000\000\000\000\000\000\067\000\072\000\
\067\000\067\000\067\000\000\000\000\000\000\000\000\000\068\000\
\067\000\068\000\068\000\068\000\000\000\000\000\000\000\069\000\
\069\000\068\000\069\000\069\000\000\000\069\000\000\000\000\000\
\070\000\070\000\067\000\070\000\070\000\000\000\070\000\000\000\
\000\000\000\000\069\000\068\000\069\000\069\000\069\000\000\000\
\000\000\000\000\000\000\070\000\069\000\070\000\070\000\070\000\
\000\000\000\000\000\000\073\000\073\000\070\000\073\000\073\000\
\000\000\073\000\000\000\000\000\080\000\080\000\069\000\080\000\
\080\000\000\000\080\000\000\000\000\000\000\000\073\000\070\000\
\000\000\073\000\073\000\076\000\076\000\000\000\076\000\076\000\
\073\000\076\000\078\000\078\000\000\000\078\000\078\000\000\000\
\078\000\080\000\079\000\079\000\000\000\079\000\079\000\000\000\
\079\000\000\000\073\000\081\000\081\000\000\000\081\000\081\000\
\076\000\081\000\000\000\080\000\000\000\083\000\083\000\078\000\
\083\000\083\000\000\000\083\000\000\000\000\000\000\000\079\000\
\084\000\084\000\076\000\084\000\084\000\000\000\084\000\000\000\
\081\000\078\000\042\000\000\000\000\000\000\000\000\000\042\000\
\000\000\079\000\083\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\081\000\032\000\042\000\084\000\042\000\042\000\
\042\000\000\000\000\000\000\000\083\000\000\000\042\000\000\000\
\032\000\033\000\032\000\032\000\032\000\000\000\033\000\084\000\
\000\000\000\000\032\000\000\000\039\000\000\000\000\000\000\000\
\042\000\039\000\000\000\033\000\000\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\032\000\033\000\039\000\034\000\
\039\000\039\000\039\000\000\000\034\000\000\000\000\000\000\000\
\039\000\000\000\000\000\035\000\000\000\000\000\000\000\033\000\
\035\000\034\000\000\000\034\000\034\000\034\000\000\000\000\000\
\000\000\000\000\039\000\034\000\000\000\035\000\036\000\035\000\
\035\000\035\000\000\000\036\000\000\000\000\000\000\000\035\000\
\000\000\037\000\000\000\000\000\000\000\034\000\037\000\000\000\
\036\000\040\000\036\000\036\000\036\000\000\000\040\000\000\000\
\000\000\035\000\036\000\037\000\000\000\037\000\037\000\037\000\
\000\000\000\000\000\000\040\000\000\000\037\000\040\000\040\000\
\003\000\000\000\004\000\005\000\036\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\000\000\000\000\013\000"

let yycheck = "\033\000\
\024\000\006\001\006\001\058\000\038\000\039\000\014\001\001\000\
\042\000\043\000\028\001\002\001\006\001\004\001\005\001\051\000\
\050\000\002\001\054\000\001\001\002\001\055\000\007\001\028\001\
\006\001\001\001\002\001\051\000\032\001\033\001\054\000\064\000\
\026\001\066\000\070\000\002\001\054\001\004\001\072\000\024\001\
\059\000\060\000\075\000\076\000\078\000\030\001\054\001\080\000\
\081\000\054\001\001\001\002\001\085\000\004\001\005\001\049\001\
\050\001\051\001\052\001\092\000\054\001\001\001\002\001\048\001\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\001\001\002\001\095\000\111\000\002\001\002\001\
\002\001\114\000\004\001\007\001\007\001\119\000\054\001\120\000\
\001\001\002\001\001\001\002\001\126\000\006\001\128\000\054\001\
\130\000\054\001\132\000\054\001\134\000\002\001\136\000\137\000\
\005\001\054\001\030\001\030\001\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\150\000\151\000\054\001\
\154\000\054\001\155\000\157\000\048\001\048\001\159\000\160\000\
\183\000\162\000\048\001\164\000\002\001\166\000\006\001\168\000\
\169\000\054\001\054\001\054\001\173\000\177\000\175\000\002\001\
\180\000\176\000\005\001\054\001\172\000\048\001\181\000\048\001\
\002\001\177\000\026\001\027\001\180\000\002\001\192\000\193\000\
\194\000\195\000\196\000\197\000\002\001\002\001\002\001\048\001\
\048\001\031\001\001\001\002\001\054\001\004\001\005\001\054\001\
\007\001\049\001\050\001\051\001\052\001\001\001\054\001\214\000\
\215\000\216\000\217\000\218\000\219\000\220\000\221\000\222\000\
\223\000\226\000\227\000\228\000\229\000\230\000\231\000\030\001\
\053\001\232\000\053\001\234\000\235\000\236\000\237\000\238\000\
\239\000\240\000\241\000\242\000\002\001\034\000\048\001\001\001\
\037\000\048\001\007\001\040\000\004\001\002\001\000\001\005\001\
\045\000\053\001\045\001\001\001\002\001\005\001\004\001\005\001\
\001\001\007\001\006\001\012\001\001\001\007\001\004\001\014\001\
\015\001\016\001\017\001\018\001\019\001\017\001\018\001\019\001\
\004\001\021\001\024\001\026\001\073\000\025\001\026\001\027\001\
\030\001\029\001\079\000\184\000\185\000\004\001\001\001\084\000\
\189\000\006\001\001\001\002\001\053\001\004\001\005\001\054\001\
\007\001\004\001\048\001\054\001\201\000\049\001\050\001\051\001\
\052\001\002\001\054\001\208\000\002\001\020\001\211\000\022\001\
\023\001\024\001\002\001\053\001\113\000\053\001\005\001\030\001\
\046\001\048\001\255\255\255\255\255\255\001\001\002\001\255\255\
\004\001\005\001\255\255\007\001\129\000\255\255\131\000\255\255\
\133\000\048\001\135\000\255\255\255\255\138\000\255\255\255\255\
\245\000\246\000\247\000\248\000\249\000\250\000\251\000\252\000\
\253\000\254\000\030\001\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\001\001\255\255\
\255\255\255\255\255\255\006\001\048\001\008\001\009\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\255\255\
\255\255\020\001\255\255\022\001\023\001\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\002\001\255\255\255\255\255\255\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\049\001\050\001\
\051\001\052\001\255\255\054\001\255\255\020\001\255\255\022\001\
\023\001\024\001\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\002\001\
\255\255\255\255\255\255\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\049\001\050\001\051\001\052\001\255\255\054\001\
\255\255\020\001\255\255\022\001\023\001\024\001\004\001\026\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\255\255\020\001\255\255\
\022\001\023\001\024\001\255\255\026\001\255\255\049\001\050\001\
\051\001\052\001\255\255\054\001\034\001\035\001\036\001\037\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\049\001\050\001\051\001\052\001\255\255\
\054\001\020\001\255\255\022\001\023\001\024\001\004\001\026\001\
\006\001\255\255\008\001\009\001\255\255\255\255\002\001\034\001\
\035\001\036\001\037\001\007\001\255\255\255\255\020\001\255\255\
\022\001\023\001\024\001\255\255\026\001\255\255\049\001\050\001\
\051\001\052\001\255\255\054\001\034\001\035\001\036\001\037\001\
\005\001\006\001\030\001\008\001\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\050\001\051\001\052\001\020\001\
\054\001\022\001\023\001\024\001\048\001\026\001\006\001\255\255\
\008\001\009\001\255\255\255\255\002\001\034\001\035\001\036\001\
\037\001\007\001\255\255\255\255\020\001\255\255\022\001\023\001\
\024\001\255\255\026\001\027\001\049\001\050\001\051\001\052\001\
\255\255\054\001\034\001\035\001\036\001\037\001\255\255\006\001\
\030\001\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\048\001\049\001\050\001\051\001\052\001\020\001\054\001\022\001\
\023\001\024\001\048\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\002\001\034\001\035\001\036\001\037\001\007\001\
\006\001\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\048\001\049\001\050\001\051\001\052\001\020\001\054\001\
\022\001\023\001\024\001\255\255\026\001\027\001\030\001\255\255\
\255\255\255\255\255\255\002\001\034\001\035\001\036\001\037\001\
\007\001\006\001\255\255\008\001\009\001\255\255\255\255\255\255\
\048\001\255\255\048\001\049\001\050\001\051\001\052\001\020\001\
\054\001\022\001\023\001\024\001\255\255\026\001\027\001\030\001\
\255\255\255\255\255\255\255\255\002\001\034\001\035\001\036\001\
\037\001\007\001\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\048\001\255\255\048\001\049\001\050\001\051\001\052\001\
\020\001\054\001\022\001\023\001\024\001\255\255\026\001\027\001\
\030\001\255\255\255\255\255\255\255\255\002\001\034\001\035\001\
\036\001\037\001\007\001\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\048\001\255\255\048\001\049\001\050\001\051\001\
\052\001\020\001\054\001\022\001\023\001\024\001\255\255\026\001\
\027\001\030\001\255\255\255\255\255\255\255\255\002\001\034\001\
\035\001\036\001\037\001\007\001\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\048\001\255\255\048\001\049\001\050\001\
\051\001\052\001\020\001\054\001\022\001\023\001\024\001\255\255\
\026\001\027\001\030\001\255\255\255\255\255\255\255\255\002\001\
\034\001\035\001\036\001\037\001\007\001\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\048\001\255\255\048\001\049\001\
\050\001\051\001\052\001\020\001\054\001\022\001\023\001\024\001\
\255\255\026\001\027\001\030\001\255\255\255\255\255\255\255\255\
\002\001\034\001\035\001\036\001\037\001\007\001\006\001\255\255\
\008\001\009\001\255\255\255\255\255\255\048\001\255\255\048\001\
\049\001\050\001\051\001\052\001\020\001\054\001\022\001\023\001\
\024\001\255\255\026\001\027\001\030\001\255\255\255\255\255\255\
\255\255\002\001\034\001\035\001\036\001\037\001\007\001\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\048\001\255\255\
\048\001\049\001\050\001\051\001\052\001\020\001\054\001\022\001\
\023\001\024\001\255\255\026\001\027\001\030\001\255\255\255\255\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\255\255\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\048\001\
\255\255\048\001\049\001\050\001\051\001\052\001\020\001\054\001\
\022\001\023\001\024\001\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\255\255\006\001\255\255\008\001\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\050\001\051\001\052\001\020\001\
\054\001\022\001\023\001\024\001\255\255\026\001\027\001\255\255\
\255\255\030\001\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\255\255\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\050\001\051\001\052\001\
\020\001\054\001\022\001\023\001\024\001\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\048\001\049\001\050\001\051\001\
\052\001\020\001\054\001\022\001\023\001\024\001\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\255\255\006\001\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\051\001\052\001\020\001\054\001\022\001\023\001\024\001\001\001\
\026\001\027\001\004\001\005\001\030\001\007\001\255\255\255\255\
\034\001\035\001\036\001\037\001\255\255\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\050\001\051\001\052\001\020\001\054\001\022\001\023\001\024\001\
\255\255\026\001\027\001\006\001\255\255\008\001\009\001\255\255\
\255\255\034\001\035\001\036\001\037\001\255\255\048\001\255\255\
\255\255\020\001\255\255\022\001\023\001\024\001\255\255\026\001\
\049\001\050\001\051\001\052\001\255\255\054\001\255\255\034\001\
\035\001\036\001\037\001\255\255\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\051\001\052\001\020\001\054\001\022\001\023\001\024\001\255\255\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\255\255\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\050\001\051\001\052\001\020\001\054\001\022\001\023\001\024\001\
\255\255\026\001\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\034\001\035\001\036\001\037\001\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\051\001\052\001\020\001\054\001\022\001\023\001\
\024\001\255\255\026\001\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\255\255\006\001\
\255\255\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\051\001\052\001\020\001\054\001\022\001\
\023\001\255\255\255\255\026\001\027\001\006\001\255\255\008\001\
\009\001\255\255\255\255\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\020\001\255\255\022\001\023\001\024\001\
\255\255\026\001\049\001\050\001\051\001\052\001\255\255\054\001\
\255\255\034\001\035\001\036\001\037\001\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\006\001\255\255\008\001\009\001\
\049\001\050\001\051\001\052\001\020\001\054\001\022\001\023\001\
\255\255\255\255\026\001\255\255\022\001\255\255\255\255\255\255\
\026\001\027\001\034\001\035\001\036\001\037\001\255\255\255\255\
\034\001\035\001\036\001\037\001\006\001\255\255\008\001\009\001\
\255\255\049\001\050\001\051\001\052\001\255\255\054\001\049\001\
\050\001\051\001\052\001\255\255\054\001\255\255\255\255\255\255\
\026\001\027\001\006\001\255\255\008\001\009\001\255\255\255\255\
\034\001\035\001\036\001\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\026\001\049\001\
\050\001\051\001\052\001\255\255\054\001\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\049\001\050\001\051\001\
\052\001\255\255\054\001\017\001\018\001\019\001\255\255\021\001\
\255\255\255\255\255\255\025\001\026\001\255\255\006\001\029\001\
\008\001\009\001\001\001\002\001\255\255\004\001\005\001\255\255\
\007\001\255\255\255\255\001\001\002\001\255\255\004\001\005\001\
\255\255\007\001\026\001\049\001\050\001\051\001\052\001\255\255\
\054\001\255\255\034\001\035\001\036\001\037\001\020\001\030\001\
\022\001\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\030\001\049\001\050\001\051\001\052\001\255\255\054\001\001\001\
\002\001\048\001\004\001\005\001\255\255\007\001\255\255\255\255\
\001\001\002\001\048\001\004\001\005\001\255\255\007\001\255\255\
\255\255\255\255\020\001\255\255\022\001\023\001\024\001\255\255\
\255\255\255\255\255\255\020\001\030\001\022\001\023\001\024\001\
\255\255\255\255\255\255\001\001\002\001\030\001\004\001\005\001\
\255\255\007\001\255\255\255\255\001\001\002\001\048\001\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\020\001\048\001\
\022\001\023\001\024\001\255\255\255\255\255\255\255\255\020\001\
\030\001\022\001\023\001\024\001\255\255\255\255\255\255\001\001\
\002\001\030\001\004\001\005\001\255\255\007\001\255\255\255\255\
\001\001\002\001\048\001\004\001\005\001\255\255\007\001\255\255\
\255\255\255\255\020\001\048\001\022\001\023\001\024\001\255\255\
\255\255\255\255\255\255\020\001\030\001\022\001\023\001\024\001\
\255\255\255\255\255\255\001\001\002\001\030\001\004\001\005\001\
\255\255\007\001\255\255\255\255\001\001\002\001\048\001\004\001\
\005\001\255\255\007\001\255\255\255\255\255\255\020\001\048\001\
\255\255\023\001\024\001\001\001\002\001\255\255\004\001\005\001\
\030\001\007\001\001\001\002\001\255\255\004\001\005\001\255\255\
\007\001\030\001\001\001\002\001\255\255\004\001\005\001\255\255\
\007\001\255\255\048\001\001\001\002\001\255\255\004\001\005\001\
\030\001\007\001\255\255\048\001\255\255\001\001\002\001\030\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\030\001\
\001\001\002\001\048\001\004\001\005\001\255\255\007\001\255\255\
\030\001\048\001\002\001\255\255\255\255\255\255\255\255\007\001\
\255\255\048\001\030\001\255\255\255\255\255\255\002\001\255\255\
\255\255\255\255\048\001\007\001\020\001\030\001\022\001\023\001\
\024\001\255\255\255\255\255\255\048\001\255\255\030\001\255\255\
\020\001\002\001\022\001\023\001\024\001\255\255\007\001\048\001\
\255\255\255\255\030\001\255\255\002\001\255\255\255\255\255\255\
\048\001\007\001\255\255\020\001\255\255\022\001\023\001\024\001\
\255\255\255\255\255\255\255\255\048\001\030\001\020\001\002\001\
\022\001\023\001\024\001\255\255\007\001\255\255\255\255\255\255\
\030\001\255\255\255\255\002\001\255\255\255\255\255\255\048\001\
\007\001\020\001\255\255\022\001\023\001\024\001\255\255\255\255\
\255\255\255\255\048\001\030\001\255\255\020\001\002\001\022\001\
\023\001\024\001\255\255\007\001\255\255\255\255\255\255\030\001\
\255\255\002\001\255\255\255\255\255\255\048\001\007\001\255\255\
\020\001\002\001\022\001\023\001\024\001\255\255\007\001\255\255\
\255\255\048\001\030\001\020\001\255\255\022\001\023\001\024\001\
\255\255\255\255\255\255\020\001\255\255\030\001\023\001\024\001\
\013\001\255\255\015\001\016\001\048\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\001\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\255\255\255\255\047\001"

let yynames_const = "\
  DEQ\000\
  COLON\000\
  SEMICOLON\000\
  COMMA\000\
  DARR\000\
  LPAREN\000\
  RPAREN\000\
  EQ\000\
  NEQ\000\
  PROP\000\
  OPENCOM\000\
  CLOSECOM\000\
  REQUIRE\000\
  EXPORT\000\
  SECTION\000\
  END\000\
  ALL\000\
  EX\000\
  EXU\000\
  IMP\000\
  LAM\000\
  CONJ\000\
  DISJ\000\
  IFF\000\
  NEG\000\
  FALSE\000\
  TRUE\000\
  BLANK\000\
  LLET\000\
  IN\000\
  SAR\000\
  INDTYPE\000\
  PROPTYPE\000\
  MEM\000\
  NMEM\000\
  SUBQ\000\
  NSUBQ\000\
  VAR\000\
  HYP\000\
  BLET\000\
  PARAM\000\
  AXIOM\000\
  DEF\000\
  THEOREM\000\
  EXACT\000\
  QED\000\
  "

let yynames_block = "\
  CONJECTURE\000\
  DOT\000\
  POLY1\000\
  POLY2\000\
  NARY1\000\
  NARY2\000\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 27 "src/coqparser/coqparser.mly"
                   ( (State.require _2) )
# 789 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 28 "src/coqparser/coqparser.mly"
                          ( (State.require _3) )
# 797 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 29 "src/coqparser/coqparser.mly"
                   (
    if (!State.coqglobalfile) then
      begin
	State.coqglobalsectionstack := ((_2,!State.coqoutfn1,!State.coqctx)::!State.coqglobalsectionstack);
	State.coqctx := []
      end
    else raise (State.GenericError "Sections are only allowed in global Coq files.") )
# 811 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 36 "src/coqparser/coqparser.mly"
               (
    if (!State.coqglobalfile) then
      begin
	match (!State.coqglobalsectionstack) with
	| ((x,fn,ctx)::sr) when x = _2 -> (State.coqoutfn1 := fn; State.coqctx := ctx; State.coqglobalsectionstack := sr)
	| ((x,_,_)::_) -> raise (State.GenericError ("Attempt to End Section " ^ _2 ^ ", but Sections " ^ x ^ " is open."))
	| _ -> raise (State.GenericError "Attempt to End a Section, but no sections are open.")
      end
    else raise (State.GenericError "Sections are only allowed in global Coq files.") )
# 827 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 45 "src/coqparser/coqparser.mly"
                             (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : (out_channel -> unit) -> out_channel -> unit = (fun g -> fun c -> g c; Printf.fprintf c "Axiom %s:" _2; Syntax.print_pretrm_coq2 c _4 (9999) (9999); Printf.fprintf c ".\n") in
	State.coqoutfn1 := cod co1;
	State.coqctx := (None,Some _4,None)::!State.coqctx
      end
    else raise (State.GenericError "Hypotheses are only allowed in global Coq files.") )
# 844 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 54 "src/coqparser/coqparser.mly"
                               (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Axiom %s:" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_all cx _4) (9999) (9999); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else State.declare_thf_logic_formula _2 "axiom" _4 )
# 863 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'preterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'ignorepfterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 65 "src/coqparser/coqparser.mly"
                                                                (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Axiom %s:" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_all cx _4) (9999) (9999); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else State.declare_thf_logic_formula _2 "lemma" _4 )
# 885 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "src/coqparser/coqparser.mly"
                                    (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	(*** Call a new satallax image on the current conjecture -- passing any slave arguments ***)
	let tmpcoqfile = "/tmp/scoqin671" in
	let tmpcoqfile2 = "/tmp/scoqin672" in
	let tmpcoq = open_out tmpcoqfile in
	co1 tmpcoq;
	Printf.fprintf tmpcoq "Conjecture %s:" _2;
	Syntax.print_pretrm_coq2 tmpcoq _4 (9999) (9999);
	Printf.fprintf tmpcoq ".\n";
	close_out tmpcoq;
	let sargs = List.fold_right (fun x a -> match a with b::r when b = "-c" -> r | r -> x::r) !State.slaveargs [] in
	let sargs = (List.fold_right (fun m a -> (m::"-m"::a)) !State.mode sargs) in
	let sargs = match (!State.timeout) with Some tm -> (string_of_float tm)::"-t"::sargs | None -> sargs in
	let sargs = tmpcoqfile::"-C"::"coqspfterm"::"-p"::tmpcoqfile2::"-c"::sargs in
	begin
	  if (!State.verbosity > 20) then (Printf.printf "call: "; List.iter (fun x -> Printf.printf " %s" x) (List.rev sargs); Printf.printf "\n");
	  match (Unix.system (String.concat " " (List.rev sargs))) with
	  | (Unix.WEXITED pstatus) when pstatus = 20 ->
	      let tmpcoqfile2in = open_in tmpcoqfile2 in
	      let b = Buffer.create 2048 in
	      begin
		try
		  while true do
		    let ch = input_char tmpcoqfile2in in
		    Buffer.add_char b ch
		  done
		with
		| End_of_file -> ()
	      end;
	      let pfstr = Buffer.contents b in
	      let tmpf = fun c ->
		begin
		  Printf.fprintf c "Theorem %s:" _2;
		  Syntax.print_pretrm_coq2 c _4 (9999) (9999);
		  Printf.fprintf c ".\n";
		  Printf.fprintf c "%s" pfstr;
		end
	      in
	      begin
		State.coqinticks := (Some tmpf,_5 + 1)::(None,_1)::!State.coqinticks;
	      end
	  | _ -> ()
	end;
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Axiom %s:" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_all cx _4) (9999) (9999); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else
      State.declare_thf_logic_formula _2 "conjecture" _4 )
# 948 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 130 "src/coqparser/coqparser.mly"
                         (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : (out_channel -> unit) -> out_channel -> unit = (fun g -> fun c -> g c; Printf.fprintf c "Parameter %s:" _2; Syntax.print_pretrm_coq2 c _4 (9999) (9999); Printf.fprintf c ".\n") in
	State.coqoutfn1 := cod co1;
	State.coqctx := (Some _2,Some _4,None)::!State.coqctx
      end
    else raise (State.GenericError "Variables are only allowed in global Coq files.") )
# 965 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 139 "src/coqparser/coqparser.mly"
                           (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Parameter %s:" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_ar cx _4) (-1) (-1); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else State.declare_typed_constant _2 "type" (Syntax.POf(Syntax.PName(_2),_4)) )
# 984 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 150 "src/coqparser/coqparser.mly"
                                     (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Definition %s:" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_ar cx _4) (-1) (-1); Printf.fprintf c " := "; Syntax.print_pretrm_coq2 c (Syntax.prectx_lam cx _6) (9999) (9999); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else State.declare_definition _2 "definition" (Syntax.PDef(Syntax.PName _2,Syntax.POf(_6,_4))) )
# 1004 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 161 "src/coqparser/coqparser.mly"
                           (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Definition %s:=" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_lam cx _4) (9999) (9999); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else State.declare_definition _2 "definition" (Syntax.PDef(Syntax.PName _2,_4)) )
# 1023 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'tpids) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'stp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 172 "src/coqparser/coqparser.mly"
                                           (
    let pretp = List.fold_right (fun (_,a) b -> Syntax.PAr(a,b)) _3 _5 in
    let pretm = List.fold_right (fun (x,a) m -> Syntax.PLam([(x,a)],m)) _3 _7 in
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Definition %s:" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_ar cx pretp) (-1) (-1); Printf.fprintf c " := "; Syntax.print_pretrm_coq2 c (Syntax.prectx_lam cx pretm) (9999) (9999); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else State.declare_definition _2 "definition" (Syntax.PDef(Syntax.PName _2,Syntax.POf(pretm,pretp))) )
# 1046 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'tpids) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 185 "src/coqparser/coqparser.mly"
                                 (
    let pretm = List.fold_right (fun (x,a) m -> Syntax.PLam([(x,a)],m)) _3 _5 in
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : Syntax.prectx -> (out_channel -> unit) -> out_channel -> unit =
	  (fun cx g -> fun c -> g c; Printf.fprintf c "Definition %s:=" _2; Syntax.print_pretrm_coq2 c (Syntax.prectx_lam cx pretm) (9999) (9999); Printf.fprintf c ".\n")
	in
	State.coqoutfn1 := cod [] co1;
	State.coqglobalsectionstack := State.updatecoqglobalsectionstack (!State.coqctx) (!State.coqglobalsectionstack) cod
      end
    else
      State.declare_definition _2 "definition" (Syntax.PDef(Syntax.PName _2,pretm)) )
# 1068 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 198 "src/coqparser/coqparser.mly"
                                      (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : (out_channel -> unit) -> out_channel -> unit = (fun g -> fun c -> g c; Printf.fprintf c "Definition %s:" _2; Syntax.print_pretrm_coq2 c _4 (-1) (-1); Printf.fprintf c " := "; Syntax.print_pretrm_coq2 c _6 (9999) (9999); Printf.fprintf c ".\n") in
	State.coqoutfn1 := cod co1;
	State.coqctx := (Some _2,Some _4,Some _6)::!State.coqctx
      end
    else raise (State.GenericError "Lets are only allowed in global Coq files.") )
# 1086 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 207 "src/coqparser/coqparser.mly"
                            (
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : (out_channel -> unit) -> out_channel -> unit = (fun g -> fun c -> g c; Printf.fprintf c "Definition %s:=" _2; Syntax.print_pretrm_coq2 c _4 (9999) (9999); Printf.fprintf c ".\n") in
	State.coqoutfn1 := cod co1;
	State.coqctx := (Some _2,None,Some _4)::!State.coqctx
      end
    else raise (State.GenericError "Lets are only allowed in global Coq files.") )
# 1103 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'tpids) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'stp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 216 "src/coqparser/coqparser.mly"
                                            (
    let pretp = List.fold_right (fun (_,a) b -> Syntax.PAr(a,b)) _3 _5 in
    let pretm = List.fold_right (fun (x,a) m -> Syntax.PLam([(x,a)],m)) _3 _7 in
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : (out_channel -> unit) -> out_channel -> unit = (fun g -> fun c -> g c; Printf.fprintf c "Definition %s:" _2; Syntax.print_pretrm_coq2 c pretp (-1) (-1); Printf.fprintf c " := "; Syntax.print_pretrm_coq2 c pretm (9999) (9999); Printf.fprintf c ".\n") in
	State.coqoutfn1 := cod co1;
	State.coqctx := (Some _2,Some pretp,Some pretm)::!State.coqctx
      end
    else raise (State.GenericError "Lets are only allowed in global Coq files.") )
# 1124 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'tpids) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 227 "src/coqparser/coqparser.mly"
                                  (
    let pretm = List.fold_right (fun (x,a) m -> Syntax.PLam([(x,a)],m)) _3 _5 in
    if (!State.coqglobalfile) then
      begin
	let co1 = !State.coqoutfn1 in
	let cod : (out_channel -> unit) -> out_channel -> unit = (fun g -> fun c -> g c; Printf.fprintf c "Definition %s:=" _2; Syntax.print_pretrm_coq2 c pretm (9999) (9999); Printf.fprintf c ".\n") in
	State.coqoutfn1 := cod co1;
	State.coqctx := (Some _2,None,Some pretm)::!State.coqctx
      end
    else
      raise (State.GenericError "Lets are only allowed in global Coq files.") )
# 1144 "src/coqparser/coqparser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stp1) in
    Obj.repr(
# 239 "src/coqparser/coqparser.mly"
           ( _1 )
# 1151 "src/coqparser/coqparser.ml"
               : 'stp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stp1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stp) in
    Obj.repr(
# 240 "src/coqparser/coqparser.mly"
                 ( Syntax.PAr(_1,_3) )
# 1159 "src/coqparser/coqparser.ml"
               : 'stp))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "src/coqparser/coqparser.mly"
            ( Syntax.PName "set" )
# 1165 "src/coqparser/coqparser.ml"
               : 'stp1))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "src/coqparser/coqparser.mly"
             ( Syntax.PPropTp )
# 1171 "src/coqparser/coqparser.ml"
               : 'stp1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stp) in
    Obj.repr(
# 244 "src/coqparser/coqparser.mly"
                      ( _2 )
# 1178 "src/coqparser/coqparser.ml"
               : 'stp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 245 "src/coqparser/coqparser.mly"
        ( _1 )
# 1185 "src/coqparser/coqparser.ml"
               : 'bid))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "src/coqparser/coqparser.mly"
                       ( "" )
# 1191 "src/coqparser/coqparser.ml"
               : 'bid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bid) in
    Obj.repr(
# 246 "src/coqparser/coqparser.mly"
         ( [_1] )
# 1198 "src/coqparser/coqparser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bid) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 247 "src/coqparser/coqparser.mly"
            ( (_1::_2) )
# 1206 "src/coqparser/coqparser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stp) in
    Obj.repr(
# 249 "src/coqparser/coqparser.mly"
                                   ( (List.map (fun x -> (x,_4)) _2) )
# 1214 "src/coqparser/coqparser.ml"
               : 'tpids))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tpids) in
    Obj.repr(
# 250 "src/coqparser/coqparser.mly"
                                      ( (List.append (List.map (fun x -> (x,_4)) _2) _6) )
# 1223 "src/coqparser/coqparser.ml"
               : 'tpids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'preterm1) in
    Obj.repr(
# 252 "src/coqparser/coqparser.mly"
                  ( _1 )
# 1230 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'preterm1) in
    Obj.repr(
# 253 "src/coqparser/coqparser.mly"
                     ( Syntax.PAp(_1,_2) )
# 1238 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 254 "src/coqparser/coqparser.mly"
                       ( Syntax.PAp(Syntax.PAp(Syntax.PEq,_1),_3) )
# 1246 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 255 "src/coqparser/coqparser.mly"
                        ( Syntax.PAp(Syntax.PAp(Syntax.PNEq,_1),_3) )
# 1254 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 256 "src/coqparser/coqparser.mly"
                        ( Syntax.PAp(Syntax.PAp(Syntax.PName "In",_1),_3) )
# 1262 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 257 "src/coqparser/coqparser.mly"
                         ( Syntax.PAp(Syntax.PNeg,Syntax.PAp(Syntax.PAp(Syntax.PName "In",_1),_3)) )
# 1270 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 258 "src/coqparser/coqparser.mly"
                         ( Syntax.PAp(Syntax.PAp(Syntax.PName "Subq",_1),_3) )
# 1278 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 259 "src/coqparser/coqparser.mly"
                          ( Syntax.PAp(Syntax.PNeg,Syntax.PAp(Syntax.PAp(Syntax.PName "Subq",_1),_3)) )
# 1286 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 260 "src/coqparser/coqparser.mly"
                        ( Syntax.PAp(Syntax.PAp(Syntax.PImplies,_1),_3) )
# 1294 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 261 "src/coqparser/coqparser.mly"
                         ( Syntax.PAp(Syntax.PAp(Syntax.PAnd,_1),_3) )
# 1302 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 262 "src/coqparser/coqparser.mly"
                         ( Syntax.PAp(Syntax.PAp(Syntax.POr,_1),_3) )
# 1310 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 263 "src/coqparser/coqparser.mly"
                        ( Syntax.PAp(Syntax.PAp(Syntax.PIff,_1),_3) )
# 1318 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 264 "src/coqparser/coqparser.mly"
                ( Syntax.PAp(Syntax.PNeg,_2) )
# 1325 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 265 "src/coqparser/coqparser.mly"
                          ( Syntax.PAll(List.map (fun x -> (x,Syntax.PName("set"))) _2,_4) )
# 1333 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 266 "src/coqparser/coqparser.mly"
                                    ( Syntax.PAll(List.map (fun x -> (x,_4)) _2,_6) )
# 1342 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 267 "src/coqparser/coqparser.mly"
                            ( Syntax.PAll(_2,_4) )
# 1350 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 268 "src/coqparser/coqparser.mly"
                        ( Syntax.PEx([(_2,Syntax.PName("set"))],_4) )
# 1358 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 269 "src/coqparser/coqparser.mly"
                                  ( Syntax.PEx([(_2,_4)],_6) )
# 1367 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 270 "src/coqparser/coqparser.mly"
                                   ( Syntax.PExU(_2,_4,_6) )
# 1376 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 271 "src/coqparser/coqparser.mly"
                         ( Syntax.PULam(_2,_4) )
# 1384 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 272 "src/coqparser/coqparser.mly"
                                   ( Syntax.PLam(List.map (fun x -> (x,_4)) _2,_6) )
# 1393 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 273 "src/coqparser/coqparser.mly"
                           ( List.fold_right (fun (x,a) m -> Syntax.PLam([(x,a)],m)) _2 _4 )
# 1401 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bid) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 274 "src/coqparser/coqparser.mly"
                                    ( Syntax.PLet(_2,_4,_6) )
# 1410 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'bid) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'stp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'preterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'preterm) in
    Obj.repr(
# 275 "src/coqparser/coqparser.mly"
                                              ( Syntax.PTLet(_2,_4,_6,_8) )
# 1420 "src/coqparser/coqparser.ml"
               : 'preterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    Obj.repr(
# 277 "src/coqparser/coqparser.mly"
                                ( _2 )
# 1427 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'preterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'preterm) in
    Obj.repr(
# 278 "src/coqparser/coqparser.mly"
                                        ( _2 )
# 1435 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 279 "src/coqparser/coqparser.mly"
       ( Syntax.PName(_1) )
# 1442 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    Obj.repr(
# 280 "src/coqparser/coqparser.mly"
              ( Syntax.PFalse )
# 1448 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "src/coqparser/coqparser.mly"
             ( Syntax.PTrue )
# 1454 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stp1) in
    Obj.repr(
# 282 "src/coqparser/coqparser.mly"
               ( Syntax.PAp(Syntax.PName _1,_2) )
# 1462 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stp1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stp1) in
    Obj.repr(
# 283 "src/coqparser/coqparser.mly"
                    ( Syntax.PAp(Syntax.PAp(Syntax.PName _1,_2),_3) )
# 1471 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 284 "src/coqparser/coqparser.mly"
               ( Syntax.PAp(Syntax.PName _1,Syntax.PInt _2) )
# 1479 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 285 "src/coqparser/coqparser.mly"
                  ( Syntax.PAp(Syntax.PAp(Syntax.PName _1,Syntax.PInt _2),Syntax.PInt _3) )
# 1488 "src/coqparser/coqparser.ml"
               : 'preterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm1) in
    Obj.repr(
# 287 "src/coqparser/coqparser.mly"
                            ( () )
# 1495 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ignorepfterm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm1) in
    Obj.repr(
# 288 "src/coqparser/coqparser.mly"
                               ( () )
# 1503 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 289 "src/coqparser/coqparser.mly"
                                 ( () )
# 1511 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 290 "src/coqparser/coqparser.mly"
                                  ( () )
# 1519 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 291 "src/coqparser/coqparser.mly"
                                  ( () )
# 1527 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 292 "src/coqparser/coqparser.mly"
                                   ( () )
# 1535 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 293 "src/coqparser/coqparser.mly"
                                   ( () )
# 1543 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 294 "src/coqparser/coqparser.mly"
                                    ( () )
# 1551 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 295 "src/coqparser/coqparser.mly"
                                  ( () )
# 1559 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 296 "src/coqparser/coqparser.mly"
                                   ( () )
# 1567 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 297 "src/coqparser/coqparser.mly"
                                   ( () )
# 1575 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 298 "src/coqparser/coqparser.mly"
                                  ( () )
# 1583 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 299 "src/coqparser/coqparser.mly"
                     ( () )
# 1590 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 300 "src/coqparser/coqparser.mly"
                                                  ( () )
# 1599 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 301 "src/coqparser/coqparser.mly"
                                 ( () )
# 1607 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 302 "src/coqparser/coqparser.mly"
                                                ( () )
# 1616 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 303 "src/coqparser/coqparser.mly"
                                                 ( () )
# 1625 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 304 "src/coqparser/coqparser.mly"
                              ( () )
# 1633 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 305 "src/coqparser/coqparser.mly"
                                                 ( () )
# 1642 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 306 "src/coqparser/coqparser.mly"
                                ( () )
# 1650 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bid) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 307 "src/coqparser/coqparser.mly"
                                              ( () )
# 1659 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'bid) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ignorepfterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'ignorepfterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm) in
    Obj.repr(
# 308 "src/coqparser/coqparser.mly"
                                                                 ( () )
# 1669 "src/coqparser/coqparser.ml"
               : 'ignorepfterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ignorepfterm) in
    Obj.repr(
# 310 "src/coqparser/coqparser.mly"
                                          ( () )
# 1676 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ignorepfterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ignorepfterm) in
    Obj.repr(
# 311 "src/coqparser/coqparser.mly"
                                                  ( () )
# 1684 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 312 "src/coqparser/coqparser.mly"
       ( () )
# 1691 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "src/coqparser/coqparser.mly"
              ( () )
# 1697 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm1) in
    Obj.repr(
# 314 "src/coqparser/coqparser.mly"
                        ( () )
# 1705 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ignorepfterm1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ignorepfterm1) in
    Obj.repr(
# 315 "src/coqparser/coqparser.mly"
                                      ( () )
# 1714 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 316 "src/coqparser/coqparser.mly"
               ( () )
# 1722 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 317 "src/coqparser/coqparser.mly"
                  ( () )
# 1731 "src/coqparser/coqparser.ml"
               : 'ignorepfterm1))
(* Entry documentitem *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let documentitem (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
