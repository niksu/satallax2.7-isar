There are a number of requirements in order to compile Satallax.
In short, you need make, ocaml, g++ and the zlib header files.
In Debian and derived Linux systems, you can get these from
the build-essential and zlib1g-dev packages. You need
ocamlopt to obtain a standalone executable.

If you're not the administrator of the computer on which you're installing,
you can quote the previous paragraph to the administrator.

* Short Instructions

cd minisat
export MROOT=`pwd`
cd core
make Solver.o
cd ../simp
make SimpSolver.o
cd ../../picosat-936
./configure
make
cd ..
./configure
make
./test | grep ERROR

./bin/satallax.opt is the native code executable to use.
See test for examples of how to use it.

* Long Instructions

STEP 1:

Compile minisat (see minisat/README)

cd minisat
export MROOT=<minisat-dir>              (or setenv in cshell)
cd core
make Solver.o
cd ../simp
make SimpSolver.o
cd ../..

STEP 2 (Optional.  Only needed to extract proof information for proof terms.) :

Build picosat (including picomus):

cd picosat-936
./configure
make
cd ..

STEP 3:

If desired, edit the configure script to give the location of your picomus
and eprover executables. (If the executables are not found by the configure script,
you will need to give the location of the executables to satallax via the command line
options -P <picomus> -E <eprover> if they are needed.)
Run the configure script for Satallax.

./configure

STEP 4:

make

uses ocamlopt to make a standalone executable

./bin/satallax.opt

and uses ocamlc to make a bytecode executable

./bin/satallax

that depends on ocamlrun

STEP 5:

Test satallax using the examples in the script file:

./test

As long as you don't see a line with the word ERROR, it should be working.

STEP 6 (Optional.  Only needed to check proof terms in Coq.) :

If you have Coq 8.4, then you can check the proof terms generated by Satallax
when the -c and -p options are used.  To do this, you will need to use the
Coq files in the coq subdirectory.  These files can be compiled via

make coq

